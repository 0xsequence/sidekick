services:
  postgres:
    image: postgres:17
    container_name: sidekick-postgres
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dev -d sequence_sidekick"]
      interval: 5s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sequence_sidekick
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data

  redis:
    container_name: sidekick-redis
    image: redis:7.2
    restart: always
    command: redis-server 
    ports:
      - "6380"
    volumes:
      - redis_data:/data
    
  sequence_sidekick:
    build: .
    container_name: sequence-sidekick
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    ports:
      - "${PORT:-7500}:7500"
    environment:
      - PORT=${PORT:-7500}
      - HOST=${HOST:-0.0.0.0}
      - SEQUENCE_PROJECT_ACCESS_KEY=${SEQUENCE_PROJECT_ACCESS_KEY}
      - API_SECRET_KEY=${API_SECRET_KEY}
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sequence_sidekick?schema=public
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BUILDER_API_SECRET_KEY=${BUILDER_API_SECRET_KEY}
      - SIGNER_TYPE=${SIGNER_TYPE}
      - DEBUG=${DEBUG}
      # AWS KMS configs
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_KMS_KEY_ID=${AWS_KMS_KEY_ID}
      # Google KMS configs
      - PROJECT=${PROJECT}
      - LOCATION=${LOCATION}
      - KEY_RING=${KEY_RING}
      - CRYPTO_KEY=${CRYPTO_KEY}
      - CRYPTO_KEY_VERSION=${CRYPTO_KEY_VERSION}
      - NODE_ENV=development
      # Local Signer configs
      - EVM_PRIVATE_KEY=${EVM_PRIVATE_KEY}
      
    command: ["/bin/sh", "-c", "npx prisma migrate reset --force && pnpm prisma migrate dev --name init && npx prisma migrate deploy && pnpm start"]

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/alerts.yml:/etc/prometheus/alerts.yml
    restart: always

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    restart: always

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
    restart: always

  blackbox:
    image: prom/blackbox-exporter:latest
    container_name: blackbox
    ports:
      - "9115:9115"
    restart: always

volumes:
  postgres_data:
  redis_data:
  grafana_data: